# -*- coding: utf-8 -*-
"""00 - Apply OpenPose to Raw Video

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KivSEhmCT5LnsRMhhG_XDUZ6B05RJM7I

### Mount Drive
"""

from google.colab import drive
drive.mount('/content/gdrive')

"""### Import Libraries"""

import os
import glob
import subprocess
import time

import pandas as pd
import numpy as np
import json

import shutil

"""### Install cmake and OpenPose dependencies"""

from os.path import exists, join, basename, splitext

git_repo_url = 'https://github.com/CMU-Perceptual-Computing-Lab/openpose.git'
project_name = splitext(basename(git_repo_url))[0]
if not exists(project_name):
  # see: https://github.com/CMU-Perceptual-Computing-Lab/openpose/issues/949
  # install new CMake becaue of CUDA10
  !wget -q https://cmake.org/files/v3.13/cmake-3.13.0-Linux-x86_64.tar.gz
  !tar xfz cmake-3.13.0-Linux-x86_64.tar.gz --strip-components=1 -C /usr/local
  # clone openpose
  !git clone -q --depth 1 $git_repo_url
  !sed -i 's/execute_process(COMMAND git checkout master WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\/3rdparty\/caffe)/execute_process(COMMAND git checkout f019d0dfe86f49d1140961f8c7dec22130c83154 WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\/3rdparty\/caffe)/g' openpose/CMakeLists.txt
  # install system dependencies
  !apt-get -qq install -y libatlas-base-dev libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler libgflags-dev libgoogle-glog-dev liblmdb-dev opencl-headers ocl-icd-opencl-dev libviennacl-dev
  # install python dependencies
  !pip install -q youtube-dl
  # build openpose
  !cd openpose && rm -rf build || true && mkdir build && cd build && cmake .. && make -j`nproc`

"""### Initialize Helper Functions and Data Structures"""

def convert_json2csv(json_directory, activity_folder):
    # determine the number of frames
    nframes = len(os.listdir(json_directory))

    # initialize res to be array of NaN
    res = np.zeros((nframes,75))
    res[:] = np.nan

    PROJ_JSON_ROOT = os.path.join('/content/openpose/output/')

    # read in JSON files
    for frame in range(0,nframes):
        
        test_image_json = os.path.join(PROJ_JSON_ROOT, f'{activity_folder}_{str(frame).zfill(12)}_keypoints.json')

        # if not os.path.isfile(test_image_json):
        #     break
        with open(test_image_json) as data_file:  
            data = json.load(data_file)

        for person in data['people']:
            keypoints = person['pose_keypoints_2d']
            xcoords = [keypoints[i] for i in range(len(keypoints)) if i % 3 == 0]
            counter = 0
            res[frame,:] = keypoints
            break

    return res


keywords_dict = {
       0 : 'NOSE',  1 : 'NECK',  2 : 'RSHO',  3 : 'RELB',  4 : 'RWRI',
       5 : 'LSHO',  6 : 'LELB',  7 : 'LWRI',  8 : 'MHIP',  9 : 'RHIP',
      10 : 'RKNE', 11 : 'RANK', 12 : 'LHIP', 13 : 'LKNE', 14 : 'LANK',
      15 : 'REYE', 16 : 'LEYE', 17 : 'REAR', 18 : 'LEAR', 19 : 'LBTO',
      20 : 'LSTO', 21 : 'LHEL', 22 : 'RBTO', 23 : 'RSTO', 24 : 'RHEL'
      }

def dataframe_preprocessing(df):
    """
    Rename columns and remove probability column
    """
    name_replace_dict={}

    for col in df.columns:
        axis = (int(col)) % 3

        axis_dict = {0:'X', 1:'Y', 2:'Prob'} 
        axis_var = axis_dict[axis]

        keypoint = (int(col)) // 3
        keypoint_var = keywords_dict[keypoint]

        name_replace_dict[col] = f'{keypoint_var}_{axis_var}'


    df = df.rename(columns=name_replace_dict)
    df = df[df.columns.drop(list(df.filter(regex='Prob')))]

    return df

"""### Apply OpenPose to Raw Videos and save Time Series data"""

PROJ_SRC_ROOT = os.path.join('/content/gdrive/MyDrive/ColabNotebooks/BiomechanicsAnalysis/___WORKOUTS/data/tests/raw')
PROJ_SAVE_ROOT = os.path.join('/content/gdrive/MyDrive/ColabNotebooks/BiomechanicsAnalysis/___WORKOUTS/data/tests/processed')

exercises_list = os.listdir(PROJ_SRC_ROOT)
run_log_data = {}

for exercise in exercises_list:
    raw_video_lst = os.listdir(os.path.join(PROJ_SRC_ROOT, exercise))

    print(exercise)
    for raw_video_file in raw_video_lst:

        src_file_path = os.path.join(PROJ_SRC_ROOT, exercise, raw_video_file)
        raw_video_folder = raw_video_file[:-4]

        print(f'\t{raw_video_folder:20}')

        #Instantiate list for each activity
        run_log_data[exercise] = []
        
        #Append file size to run logs
        file_size = os.path.getsize(src_file_path)
        run_log_data[exercise].append(file_size)

        #Clear json files from previous run
        for f in glob.glob('/content/openpose/output/*.json'):
            os.remove(f)

        #Clear avi files from previous run 
        subprocess.run(["rm", "openpose.avi"])

        #Run Pose Detection
        start = time.time()
        os.chdir('/content/openpose')
        subprocess.run(["./build/examples/openpose/openpose.bin", 
                "--video", src_file_path, 
                "--write_json", "./output/", 
                "--display", "0",  
                "--write_video", "../openpose.avi"], 
                shell=False)
        end = time.time()
        pose_detection_time = round(end-start, 1)
        run_log_data[exercise].append(pose_detection_time)  

        print(f'\t\t Pose Detected in {pose_detection_time:5}s')

        #AVI to MP4 conversion
        start = time.time()
        os.chdir('/content')
        subprocess.run(["ffmpeg", "-y", "-loglevel", "info", "-i", "openpose.avi", "output.mp4"], shell=False)
        end = time.time()
        video_convert_time = round(end-start, 1)
        run_log_data[exercise].append(video_convert_time) 

        print(f'\t\t Video Converted in {video_convert_time:5}s') 

        #Create csv output from json files
        biomech_df = pd.DataFrame(convert_json2csv("/content/openpose/output/", raw_video_folder))

        #Apply pre-processing steps
        biomech_df = dataframe_preprocessing(biomech_df)

        #########################################  SAVING  ##########################################

        # Make specific folder for activity files
        path = os.path.join(PROJ_SAVE_ROOT, exercise, raw_video_folder)

        if os.path.exists(path):
            pass
        else:
            os.mkdir(path)

        #### DATA
        data_save_path = os.path.join(PROJ_SAVE_ROOT, exercise, raw_video_folder, f"{raw_video_folder}.csv")
        biomech_df.to_csv(data_save_path)

        print(f'\t\t Save path : {data_save_path:20}')

        #### VIDEOS
        avi_video_src_file_path = '/content/openpose.avi'
        mp4_video_src_file_path = '/content/output.mp4'

        avi_save_path = os.path.join(PROJ_SAVE_ROOT, exercise, raw_video_folder, f"{raw_video_folder}.avi")
        mp4_save_path = os.path.join(PROJ_SAVE_ROOT, exercise, raw_video_folder, f"{raw_video_folder}.mp4")

        shutil.move(avi_video_src_file_path, avi_save_path)
        shutil.move(mp4_video_src_file_path, mp4_save_path)

        print(f'\t\t Video Saved')

biomech_df = pd.DataFrame.from_dict(run_log_data, orient='index', columns=['File_Size', "Pose_Detection_Time(s)", "Video_Convert_Time(s)"])

biomech_df