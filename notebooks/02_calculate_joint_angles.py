# -*- coding: utf-8 -*-
"""02 - Calculate Joint Angles

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DS2pLl7fhvccBJcZcWZnUcSgnzILOoUJ

### Mount Drive
"""

from google.colab import drive
drive.mount('/content/gdrive')

"""### Import Libraries"""

import pandas as pd
import numpy as np
import os

from scipy.signal import find_peaks

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

"""### Initialize Helper Functions"""

def get_angle(A: str, B: str, C: str, orientation: str, df: pd.DataFrame) -> np.ndarray:
    """
    B is the target joint angle

    A and C     - keypoint trajectories required to calculate B
    orientation - can be either L or R
    df          - dataframe with keypoint trajectories
    """

    point_A = np.array([df[f'{orientation}{A}_X'],df[f'{orientation}{A}_Y']]).T
    point_B = np.array([df[f'{orientation}{B}_X'],df[f'{orientation}{B}_Y']]).T
    point_C = np.array([df[f'{orientation}{C}_X'],df[f'{orientation}{C}_Y']]).T

    len_AB = point_A - point_B
    len_CB = point_C - point_B

    dot_products = np.sum(len_AB*len_CB,axis=1)
    norm_products = np.linalg.norm(len_AB,axis=1)*np.linalg.norm(len_CB,axis=1)

    joint_angle = np.arccos(dot_products/norm_products)*(180/np.pi)

    return joint_angle

def create_joint_angle_dataframe_from_keypoints_dataframe(df):
    """
    -Apply get_angle function to keypoints 
    -Create dataframe of joint angles
    """
    JA_reference_dict = {
            'ELB' : ['WRI','ELB','SHO'],
            'SHO' : ['ELB','SHO','HIP'],
            'HIP' : ['SHO','HIP','KNE'],
            'KNE' : ['HIP','KNE','ANK']} 

    JA_dict_to_df = {}
    for joint in JA_reference_dict:
        A = JA_reference_dict[joint][0]
        B = JA_reference_dict[joint][1]
        C = JA_reference_dict[joint][2]

        for orientation in ('L','R'):

            JA_dict_to_df[f'{orientation}_{joint}']= pd.Series(get_angle(A, B, C, orientation, df))

    return pd.DataFrame.from_dict(JA_dict_to_df)


def save_major_JA_dataframe_as_array_of_subplots(df, plot_name, save_path):
    fig, axs = plt.subplots(2, 4, figsize=(24,8), constrained_layout=True)

    for ax, val in zip(axs.flat, df.columns):

        ax.set_title(f'{val}')
        ax.set_xlabel('Time (%)', fontsize=10)
        ax.set_ylabel(r'Joint Angle $\theta$ (deg)', fontsize=10)

        ax.plot(df[val], label=val)
        ax.legend()
        ax.margins(x=0.01)
        
        ax.xaxis.set_major_locator(ticker.MultipleLocator(len(df)/5))
        ax.xaxis.set_minor_locator(ticker.MultipleLocator(len(df)/20))
        ax.xaxis.set_major_formatter(ticker.PercentFormatter(xmax=len(df)))

    fig.suptitle(plot_name, fontsize=25)
    plt.savefig(save_path)
    plt.close(fig)

"""### Save Joint Angle Data and Plots"""

PROJ_SAVE_ROOT = os.path.join('/content/gdrive/MyDrive/ColabNotebooks/BiomechanicsAnalysis/___WORKOUTS/data/tests/processed')

exercises_list = os.listdir(PROJ_SAVE_ROOT)

for exercise_folder in exercises_list:
    exercise_samples =  os.listdir(os.path.join(PROJ_SAVE_ROOT, exercise_folder))

    print(exercise_folder)
    for sample in exercise_samples:

        print(f'\t{sample}')

        #Define paths
        processed_data_path = os.path.join(PROJ_SAVE_ROOT, exercise_folder, sample, f'{sample}_data_processed.csv')
        joint_angle_save_path = os.path.join(PROJ_SAVE_ROOT, exercise_folder, sample, f'{sample}_joint_angles.csv')
        joint_angle_plot_save_path = os.path.join(PROJ_SAVE_ROOT, exercise_folder, sample, f'{sample}_joint_angles.png')

        # Apply processing steps
        df = pd.read_csv(processed_data_path, index_col=0)
        major_JA_df = create_joint_angle_dataframe_from_keypoints_dataframe(df)

        # Save data
        df_to_be_saved = major_JA_df.dropna().reset_index(drop=True)
        df_to_be_saved.to_csv(joint_angle_save_path)
        print(f'\t\t{sample:20} processed data saved')

        save_major_JA_dataframe_as_array_of_subplots(df, sample, joint_angle_plot_save_path)
        print(f'\t\t{sample:20} plot saved')